# -*- coding: utf-8 -*-


import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputTextMessageContent, InlineQuery, \
    InlineQueryResultArticle, ContentTypes, ChatType
import aiosqlite
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import types

API_TOKEN = 'token'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
class FeedbackForm(StatesGroup):
    Feedback = State()


# Database setup
DATABASE = 'start_users.db'


async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS start_user (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                telegram_id INTEGER UNIQUE
            )
        ''')
        await db.commit()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    # image_path = 'home\\ruvds-user\\tickets\\1.jpg'
    image_path = '1.jpg'
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    with open(image_path, 'rb') as photo:
        await message.reply_photo(
            photo,
            caption=f"üôã–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\nü§ñ–Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ *StickerWay*. \n\nüÜò–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –í–∞–º.\n\nüëá–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n\n"
                    "üè∑Ô∏è - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ –Ω–∞—à–∏—Ö –Ω–∞–∫–ª–µ–µ–∫ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫\n"
                    "üì¶ - –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫–ª–µ–π–∫–∏ –Ω–∞–ø—Ä—è–º—É—é —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n"
                    "üì∞ - –£–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –Ω–æ–≤–∏–Ω–∫–∞—Ö\n"
                    "üìë - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏\n"
                    "‚ùì - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ë—Ä–µ–Ω–¥–∞\n"
                    "üìù - –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏",
            reply_markup=InlineKeyboardMarkup().row(
                InlineKeyboardButton('üìö –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog'),
                InlineKeyboardButton('üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
            ).row(
                InlineKeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏', url='https://t.me/sticker_way/24')
            ).row(
                InlineKeyboardButton('üõí Ozon', url='https://www.ozon.ru/brand/stickerway-101097965/'),
                InlineKeyboardButton('üõçÔ∏è Wildberries', url='https://www.wildberries.ru/brands/868382-StickerWay')
            )
        )


@dp.callback_query_handler(lambda c: c.data == 'about_us')
async def about_us_callback(callback_query: types.CallbackQuery):
    about_us_text = (
        "üè∑Ô∏è *StickerWay* - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ —ç—Ç–∏–∫–µ—Ç–æ–∫ –∏ –Ω–∞–∫–ª–µ–µ–∫!\n\n"
        "–ú—ã - –º–∞–≥–∞–∑–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏, –º—ã —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å "
        "–∏ –ø–æ–º–æ–≥–∞–µ–º –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –ø—Ä–æ—Ü–≤–µ—Ç–∞—Ç—å.\n\n"
        "–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–Ω–∞–º.\n\n"
        "–í—ã–±–∏—Ä–∞—è *StickerWay*, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
        "‚úÖ –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è –ª—é–±—ã—Ö –Ω—É–∂–¥\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n"
        "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–µ–≥–æ–¥–Ω—è –∏ –¥–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –±—Ä–µ–Ω–¥ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–º! üíº"
    )

    ozon_button = InlineKeyboardButton('üõí Ozon', url='https://www.ozon.ru/brand/stickerway-101097965/')
    wildberries_button = InlineKeyboardButton('üõçÔ∏è Wildberries',
                                              url='https://www.wildberries.ru/brands/868382-StickerWay')
    InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')

    reply_markup = InlineKeyboardMarkup(row_width=2).add(ozon_button, wildberries_button)

    await bot.send_message(callback_query.from_user.id, about_us_text, reply_markup=reply_markup, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.callback_query_handler(lambda c: c.data == 'feedback')
async def process_feedback_callback(callback_query: types.CallbackQuery):
    await FeedbackForm.Feedback.set()
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_feedback'))
    await bot.send_message(
        callback_query.from_user.id,
        "üåü –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –∏ —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É. \n\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. \n"
        "üí¨ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–∑—ã–≤–∞
@dp.callback_query_handler(lambda c: c.data == 'cancel_feedback', state=FeedbackForm.Feedback)
async def process_cancel_feedback_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await bot.send_message(
        callback_query.from_user.id,
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home'))
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º
@dp.message_handler(state=FeedbackForm.Feedback)
async def process_feedback_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['feedback'] = message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_link = f"[{message.from_user.full_name}](tg://user?id={message.from_user.id})"
    if message.from_user.username:
        user_link = f'<a href="https://t.me/{message.from_user.username}">{message.from_user.full_name}</a>'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_preview = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>'
    if message.from_user.username:
        user_preview = f'<a href="https://t.me/{message.from_user.username}">{message.from_user.full_name}</a>'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -4256534684
    await bot.send_message(
        -1002195788596,
        f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_preview} (ID: {message.from_user.id}):\n\n{message.text}",
        parse_mode=types.ParseMode.HTML
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await message.answer(
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
        "üíº –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã —É–ª—É—á—à–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º.\n\n"
        "üè† –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')),
        parse_mode=types.ParseMode.MARKDOWN
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞
# @dp.callback_query_handler(lambda c: c.data == 'place_order')
# async def handle_place_order(callback_query: types.CallbackQuery):
#     questions = (
#         "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
#         "1Ô∏è‚É£ –ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω?\n"
#         "2Ô∏è‚É£ –ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –±–æ—Ç–∞?\n"
#         "3Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–æ—Ç—É?\n"
#         "4Ô∏è‚É£ –ö–∞–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –±–æ—Ç–æ–º?\n"
#         "5Ô∏è‚É£ –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?\n\n"
#         "üîπ *–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.*"
#     )
#
#     keyboard = InlineKeyboardMarkup()
#     keyboard.add(InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å", url="https://t.me/BOTS_FATHERR"))
#     keyboard.add(InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home"))
#     await bot.send_message(callback_query.from_user.id, questions, reply_markup=keyboard, parse_mode='Markdown')


@dp.callback_query_handler(lambda c: c.data == 'support')
async def process_support_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()

    faq_button = InlineKeyboardButton('üìã –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='faq')
    feedback_button = InlineKeyboardButton('üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='feedback')
    buy_in_bulk_button = InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –Ω–∞–∫–ª–µ–π–∫–∏ –±–æ–ª—å—à–æ–π –ø–∞—Ä—Ç–∏–µ–π', callback_data='buy_in_bulk')
    offer_design_button = InlineKeyboardButton('‚úèÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–∏–∑–∞–π–Ω/—Ü–≤–µ—Ç/–Ω–∞–¥–ø–∏—Å—å –Ω–∞–∫–ª–µ–π–∫–∏',
                                               callback_data='offer_design')
    damaged_items_button = InlineKeyboardButton('üÜò –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º (–ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –ø–µ—Ä–µ–ø—É—Ç–∞–Ω, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)',
                                                callback_data='damaged_items')
    # order_bot_button = InlineKeyboardButton('ü§ñ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', callback_data='place_order')
    home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')

    keyboard.row(faq_button, feedback_button)
    keyboard.row(buy_in_bulk_button)
    keyboard.row(offer_design_button)
    keyboard.add(damaged_items_button)
    # keyboard.add(order_bot_button)  # Adding the order bot button
    keyboard.add(home_button)  # Ensuring the home button is the last one

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    # image_path = 'home\\ruvds-user\\tickets\\2.png'
    image_path = '2.png'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    with open(image_path, 'rb') as photo:
        await bot.send_photo(
            callback_query.from_user.id,
            photo,
            caption="üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üõ†Ô∏è\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—Ü–∏–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n\n"
                    "üìã *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã* - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
                    "üì© *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å* - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n\n"
                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. ü§ñ‚ú®",
            reply_markup=keyboard
        )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'home')
async def back_to_home_callback(callback_query: types.CallbackQuery):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    #image_path = 'home\\ruvds-user\\tickets\\1.jpg'
    image_path = '1.jpg'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    with open(image_path, 'rb') as photo:
        await bot.send_photo(
            callback_query.from_user.id,
            photo,
            caption=f"üôã–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}!\n\nü§ñ–Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ *StickerWay*. \n\nüÜò–Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –í–∞–º.\n\nüëá–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n\n"
                    "üè∑Ô∏è - –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ –Ω–∞—à–∏—Ö –Ω–∞–∫–ª–µ–µ–∫ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫\n"
                    "üì¶ - –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫–ª–µ–π–∫–∏ –Ω–∞–ø—Ä—è–º—É—é —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n"
                    "üì∞ - –£–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –Ω–æ–≤–∏–Ω–∫–∞—Ö\n"
                    "üìë - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏\n"
                    "‚ùì - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—é –ë—Ä–µ–Ω–¥–∞\n"
                    "üìù - –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏",
            reply_markup=InlineKeyboardMarkup().row(
                InlineKeyboardButton('üìö –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog'),
                InlineKeyboardButton('üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
            ).row(
                InlineKeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏', url='https://t.me/sticker_way/24')
            ).row(
                InlineKeyboardButton('üõí Ozon', url='https://www.ozon.ru/brand/stickerway-101097965/'),
                InlineKeyboardButton('üõçÔ∏è Wildberries', url='https://www.wildberries.ru/brands/868382-StickerWay')
            )
        )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'damaged_items')
async def process_damaged_items_callback(callback_query: types.CallbackQuery):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏–ª–∏ –∑–∞–∫–∞–∑–æ–º
    damaged_items_message = (
        "üì¶ *–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏/–Ω–µ —Ç–æ—Ç —Ç–æ–≤–∞—Ä/–∑–∞–¥–µ—Ä–∂–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç. –¥.), "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üì¶ü§ù"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å inline –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    write_to_admin_button = InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å', url='https://t.me/Bogosann')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    reply_markup = InlineKeyboardMarkup().add(write_to_admin_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        damaged_items_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'offer_design')
async def process_offer_design_callback(callback_query: types.CallbackQuery):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞/—Ü–≤–µ—Ç–∞/–Ω–∞–¥–ø–∏—Å–∏ –Ω–∞–∫–ª–µ–π–∫–∏
    offer_design_message = (
        "‚úèÔ∏è *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞/—Ü–≤–µ—Ç–∞/–Ω–∞–¥–ø–∏—Å–∏ –Ω–∞–∫–ª–µ–π–∫–∏*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏ –ø–æ –¥–∏–∑–∞–π–Ω—É, —Ü–≤–µ—Ç—É –∏–ª–∏ –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ –Ω–∞–∫–ª–µ–π–∫–µ, –º—ã –≥–æ—Ç–æ–≤—ã –∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å "
        "–∏ –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤ –∂–∏–∑–Ω—å!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å, "
        "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É! üé®‚ú®"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    write_to_admin_button = InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å', url='https://t.me/Bogosann')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å inline –∫–Ω–æ–ø–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    reply_markup = InlineKeyboardMarkup().add(write_to_admin_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞/—Ü–≤–µ—Ç–∞/–Ω–∞–¥–ø–∏—Å–∏ –Ω–∞–∫–ª–µ–π–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        offer_design_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'buy_in_bulk')
async def process_buy_in_bulk_callback(callback_query: types.CallbackQuery):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–æ–π –ø–∞—Ä—Ç–∏–∏
    bulk_order_message = (
        "üõí *–ó–∞–∫–∞–∑ –Ω–∞–∫–ª–µ–µ–∫ –±–æ–ª—å—à–æ–π –ø–∞—Ä—Ç–∏–µ–π*\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–æ–π –ø–∞—Ä—Ç–∏–∏ –Ω–∞–∫–ª–µ–µ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É "
        "—Å–æ —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞–∂–¥–æ–≥–æ, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "
        "–¥–ª—è —Å–≤—è–∑–∏.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä *StickerWay*!"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    write_to_admin_button = InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å', url='https://t.me/Bogosann')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å inline –∫–Ω–æ–ø–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    reply_markup = InlineKeyboardMarkup().add(write_to_admin_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–æ–π –ø–∞—Ä—Ç–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        bulk_order_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'faq')
async def process_faq_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    printer_setup_button = InlineKeyboardButton('üñ®Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ Xprinter 365B',
                                                url='https://telegra.ph/Rukovodstvo-po-pechati-05-22')
    thermal_printing_button = InlineKeyboardButton('üè∑Ô∏è –¢–µ—Ä–º–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∞—è –ø–µ—á–∞—Ç—å', callback_data='thermal_printing')
    no_ribbon_printing_button = InlineKeyboardButton('üö´ –ü–µ—á–∞—Ç—å –±–µ–∑ —Ä–∏–±–±–æ–Ω–∞', callback_data='no_ribbon_printing')
    printer_compatibility_button = InlineKeyboardButton('üñ®Ô∏èüì± –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤',
                                                        callback_data='printer_compatibility')
    improve_print_quality_button = InlineKeyboardButton('üñ®Ô∏è –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏',
                                                        callback_data='improve_print_quality')
    calibrate_printer_button = InlineKeyboardButton('üõ†Ô∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞', callback_data='calibrate_printer')
    label_writing_button = InlineKeyboardButton('üñãÔ∏è –ù–∞–¥–ø–∏—Å—å –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∞—Ö', callback_data='label_writing')

    keyboard.row(printer_setup_button)
    keyboard.row(thermal_printing_button)
    keyboard.row(no_ribbon_printing_button)
    keyboard.row(printer_compatibility_button)
    keyboard.row(improve_print_quality_button)
    keyboard.row(calibrate_printer_button)
    keyboard.add(label_writing_button)

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    # image_path = 'home\\ruvds-user\\tickets\\3.png'
    image_path = '3.png'
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    with open(image_path, 'rb') as photo:
        await bot.send_photo(
            callback_query.from_user.id,
            photo,
            caption="üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            ,
            reply_markup=keyboard
        )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'label_writing')
async def process_label_writing_callback(callback_query: types.CallbackQuery):
    response_message = (
        "üñãÔ∏è –ù–∞ –Ω–∞—à–∏—Ö —ç—Ç–∏–∫–µ—Ç–∫–∞—Ö –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ä—É—á–∫–æ–π –∏ –º–∞—Ä–∫–µ—Ä–æ–º."
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button).add(back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∏—Å–∞—Ç—å –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∞—Ö –∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        response_message,
        reply_markup=keyboard
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'calibrate_printer')
async def process_calibrate_printer_callback(callback_query: types.CallbackQuery):
    response_message = (
        "üõ†Ô∏è –ï—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä —Å —Ç—Ä—É–¥–æ–º —Ç—è–Ω–µ—Ç –ª–µ–Ω—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã —Å–ª–∏—à–∫–æ–º –ø–ª–æ—Ç–Ω–æ –ø—Ä–∏–∂–∞–ª–∏ –µ–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞. "
        "–û—Å–ª–∞–±—å—Ç–µ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã, –Ω–µ–º–Ω–æ–≥–æ –µ–≥–æ —Ä–∞–∑–º–æ—Ç–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—Ç–µ—Ä—É –±—ã–ª–æ –ª–µ–≥—á–µ —Ç—è–Ω—É—Ç—å —Ä—É–ª–æ–Ω. "
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –ø–ª–æ—Ç–Ω–æ –∑–∞–∂–∞–ª–∏ —Ä—É–ª–æ–Ω, –∞ –æ–Ω –º–æ–∂–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ."
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button).add(back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        response_message,
        reply_markup=keyboard
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'improve_print_quality')
async def process_improve_print_quality_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    pale_printing_button = InlineKeyboardButton('üñ®Ô∏è –ë–ª–µ–¥–Ω–∞—è –ø–µ—á–∞—Ç—å', callback_data='pale_printing')
    blurry_printing_button = InlineKeyboardButton('üîç –ü–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–µ—á–µ—Ç–∫–∞—è', callback_data='blurry_printing')

    keyboard.add(pale_printing_button, blurry_printing_button)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ë–ª–µ–¥–Ω–∞—è –ø–µ—á–∞—Ç—å" –∏ "–ü–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–µ—á–µ—Ç–∫–∞—è"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard.row(back_to_questions_button).add(back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ë–ª–µ–¥–Ω–∞—è –ø–µ—á–∞—Ç—å" –∏ "–ü–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–µ—á–µ—Ç–∫–∞—è"
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=keyboard
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'pale_printing')
async def process_pale_printing_callback(callback_query: types.CallbackQuery):
    message_text = (
        "üñ®Ô∏è *–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã '–ë–ª–µ–¥–Ω–æ–π –ø–µ—á–∞—Ç–∏'*:\n\n"
        "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏', –¥–∞–ª–µ–µ –≤–∫–ª–∞–¥–∫–∞ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'. –ó–¥–µ—Å—å –µ—Å—Ç—å –±–µ–≥—É–Ω–æ–∫ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∑–Ω–∞—á–µ–Ω–∏—è '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ —É–º–µ–Ω—å—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏.\n\n"
        "–¢–∞–∫–∂–µ —Ö–æ—Ç–∏–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ - –µ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–∏—Ç—å –æ—Ç –ø—ã–ª–∏, –≤–æ—Ä—Å–∞, —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏–ª–∏–ø—à–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –±—É–º–∞–≥–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–µ–∑–≤–æ—Ä—Å–æ–≤—É—é —Å–∞–ª—Ñ–µ—Ç–∫—É)."
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        message_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'blurry_printing')
async def process_blurry_printing_callback(callback_query: types.CallbackQuery):
    message_text = (
        "üîç *–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã '–ù–µ—á–µ—Ç–∫–æ–π –ø–µ—á–∞—Ç–∏'*:\n\n"
        "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ì—Ä–∞—Ñ–∏–∫–∞'. –í –æ–∫–æ—à–∫–µ '–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ' –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ '–ù–µ—Ç'. –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ ‚Äì –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º–µ–Ω—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç (JPG, PNG –∏ —Ç.–¥.)."
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(
        callback_query.from_user.id,
        message_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'thermal_printing')
async def process_thermal_printing_callback(callback_query: types.CallbackQuery):
    response_message = "–ù–∞—à–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ç–µ—Ä–º–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–π –ø–µ—á–∞—Ç–∏ —Å —Ä–∏–±–±–æ–Ω–æ–º. üè∑Ô∏è"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Ä–º–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–π –ø–µ—á–∞—Ç–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(callback_query.from_user.id, response_message, reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'no_ribbon_printing')
async def process_no_ribbon_printing_callback(callback_query: types.CallbackQuery):
    response_message = "–î–∞, –Ω–∞—à–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä–æ–º, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∏–±–±–æ–Ω–∞. üö´"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–∏–∫–µ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ —Ä–∏–±–±–æ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(callback_query.from_user.id, response_message, reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'printer_compatibility')
async def process_printer_compatibility_callback(callback_query: types.CallbackQuery):
    response_message = (
        "–ù–∞—à–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:\n\n"
        "‚Ä¢ Pop mix\n"
        "‚Ä¢ NIIMBOT\n"
        "‚Ä¢ Phomemo\n"
        "‚Ä¢ Peripage\n"
        "‚Ä¢ –î–µ—Ç—Å–∫–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã\n\n"
        "üñ®Ô∏èüì±"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    back_to_questions_button = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data='faq')
    back_to_home_button = InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    keyboard = InlineKeyboardMarkup().row(back_to_questions_button, back_to_home_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    await bot.send_message(callback_query.from_user.id, response_message, reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'catalog')
async def catalog_callback(callback_query: types.CallbackQuery):
    catalog_text = (
        "üè∑Ô∏è *StickerWay* –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–µ–µ–∫ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º:\n"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    category_buttons = [
        InlineKeyboardButton('üåà –¶–≤–µ—Ç–Ω—ã–µ —Ç–µ—Ä–º–æ—ç—Ç–∏–∫–µ—Ç–∫–∏ 58*40,30*20', url='https://t.me/sticker_way/22'),
        InlineKeyboardButton('üü° –¢–µ—Ä–º–æ—ç—Ç–∏–∫–µ—Ç–∫–∏ 40*40 –∫—Ä—É–≥–ª—ã–µ', url='https://t.me/sticker_way/20'),
        InlineKeyboardButton('üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –Ω–∞–∫–ª–µ–π–∫–∏', url='https://t.me/sticker_way/18'),
        InlineKeyboardButton('üìî –ù–∞–∫–ª–µ–π–∫–∏ –Ω–∞ —Ç–µ—Ç—Ä–∞–¥–∏/—à–∫–æ–ª—å–Ω—ã–µ', url='https://t.me/sticker_way/16'),
        InlineKeyboardButton('‚ö™Ô∏è  –î–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (–ø—É—Å—Ç—ã–µ –ø–æ–ª—è)', url='https://t.me/sticker_way/12'),
        InlineKeyboardButton('‚òòÔ∏è –ù–∞–∫–ª–µ–π–∫–∏ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç', url='https://t.me/sticker_way/8'),
        InlineKeyboardButton('üéÅ –ù–∞–∫–ª–µ–π–∫–∏ –ü–æ–¥–∞—Ä–æ–∫', url='https://t.me/sticker_way/6'),
        InlineKeyboardButton('üôèüèª –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑', url='https://t.me/sticker_way/4'),
        InlineKeyboardButton('ü§≤üèª–†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', url='https://t.me/sticker_way/2'),
        InlineKeyboardButton('üßº –ú—ã–ª–æ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã', url='https://t.me/sticker_way/10'),
        InlineKeyboardButton('üóÉ–†–∞–∑–Ω–æ–µ', url='https://t.me/sticker_way/14'),
        InlineKeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='home')
    ]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    reply_markup = InlineKeyboardMarkup(row_width=2)
    for button in category_buttons:
        reply_markup.row(button)

    await bot.send_message(callback_query.from_user.id, catalog_text, reply_markup=reply_markup, parse_mode='Markdown')


if __name__ == '__main__':
    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
